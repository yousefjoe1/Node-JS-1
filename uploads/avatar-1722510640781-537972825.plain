import React, { Suspense } from "react";
import {
  Alert,
  AlertDescription,
  AlertIcon,
  AlertTitle,
  Spinner,
} from "@chakra-ui/react";
import { Card, CardBody, CardFooter } from "@nextui-org/card";

import Image from "next/image";
import Link from "next/link";

import getData from "../Requests/getData";
import ChakraUi from "@/Providers/ChakraUI";

const page = async () => {
  const { data, status } = await getData("course");
  return (
    <div className="container p-5">
      <Suspense
        fallback={
          <Spinner thickness="4px" speed="0.65s" emptyColor="gray.200" color="blue.500" size="xl"/>
        }
      >
        <div className="flex flex-wrap gap-4 mt-3">
          {status == true ? (
            data.data.map((course: any) => (
              <Link
                key={course.id}
                href={`/course/${course.id}`}
                className="text-gray-700 hover:text-blue-500 hover:border-blue-500 px-3 py-2 rounded-md"
              >
                <Card isPressable className="py-4 bg-slate-600 rounded-xl">
                  <CardBody className="py-2 h-[300px] max-w-[400px] ">
                    <Image
                      alt="Card background"
                      className="object-cover w-full h-full rounded-xl"
                      src={course.img}
                      width={300}
                      height={300}
                    />
                  </CardBody>
                  <CardFooter className="pb-0 pt-2 px-4 flex justify-between white bold text-xl items-start">
                    <h3>{course.name}</h3>
                    <h3>{course.price}</h3>
                  </CardFooter>
                </Card>
              </Link>
            ))
          ) : (
            <>
              <ChakraUi>
                <Alert status="error">
                  <AlertIcon />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>
                    Relod the page or check the connection
                    <Link
                      href={`/`}
                      className="font-bold text-2xl text-blue-400 "
                    >
                      Back to home
                    </Link>
                  </AlertDescription>
                </Alert>
              </ChakraUi>
            </>
          )}
        </div>
      </Suspense>
    </div>
  );
};

export default page;




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"use server";
import axios from "axios";
import { cookies } from "next/headers";

const getData = async (api: string) => {
  let response = { data: [], status: false };

  let cook = cookies().get("user-connect")?.name;
  let cookValue = cookies().get("user-connect")?.value;

  if(!cook){
    response = { data: [], status: false };
  }

  try {
    const { data } = await axios.get(`${process.env.B_HOST}/${api}`, {
      headers: { Authorization: `Bearer ${cookValue}` },
    });
    response = { data: data, status: true };
  } catch (er) {
    response = { data: [], status: false };
  }

  return response

};

export default getData;
